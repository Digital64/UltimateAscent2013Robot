// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.


package org.usfirst.frc2877.UltimateAscent2013Robot.subsystems;

import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.command.Subsystem;
import org.usfirst.frc2877.UltimateAscent2013Robot.RobotMap;


/**
 *
 */
public class Acquisition extends Subsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    Relay acquisitionRoller = RobotMap.acquisitionAcquisitionRoller;
    CANJaguar acquisitionScrewlift = RobotMap.acquisitionAcquisitionScrewlift;
    Encoder acquisitionScrewEncoder = RobotMap.acquisitionAcquisitionScrewEncoder;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static final int NUMPOSITIONS = 4;
    public static double threshold = 2.0;
    private static AnalogChannel[] infraRedSensor;
    private static double[] sensorValues;
    
    // diskPositions is what we think the current disk positions are
    private static boolean[] diskPositions;
    // diskPositions candidate is where the sensors tell us the disks are now
    private static boolean[] diskPositionsCandidate;
    // we have two arrays so we can check for anamolies -- disks that disappear
    // or appear where they shouldn't be
    
    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void Acquisition()
    {
        infraRedSensor = new AnalogChannel[NUMPOSITIONS];
        sensorValues = new double[NUMPOSITIONS];
        diskPositions = new boolean[NUMPOSITIONS];
        diskPositionsCandidate = new boolean[NUMPOSITIONS];
        
        for (int i=0; i!=NUMPOSITIONS; i++)
        {
            infraRedSensor[i] = new AnalogChannel(i);
            sensorValues[i] = 0.0;
            diskPositions[i] = false;
            diskPositionsCandidate[i] = false;
        }
    }

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
        System.out.println("Disk Acquision initDefaultCommand called.");
    }
    
    public void refreshValues()
    {
        for (int i=0; i!=NUMPOSITIONS; i++)
        {
           sensorValues[i] = infraRedSensor[i].getVoltage();
           diskPositionsCandidate[i] = (sensorValues[i] > threshold);
        }
    }
}

