// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.


package org.usfirst.frc2877.UltimateAscent2013Robot;
    
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.CounterBase.EncodingType; import edu.wpi.first.wpilibj.Encoder.PIDSourceParameter;
import edu.wpi.first.wpilibj.can.*;

import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import java.util.Vector;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static CANJaguar driveTrainJaguarLeftFront;
    public static CANJaguar driveTrainJaguarRightFront;
    public static CANJaguar driveTrainJaguarLeftBack;
    public static CANJaguar driveTrainJaguarRightBack;
    public static RobotDrive driveTrainRobotDrive41;
    public static Relay shooterShooterFrontWheel;
    public static Relay shooterShooterBackWheel;
    public static CANJaguar shooterShooterAngle;
    public static Encoder shooterShooterAngleEncoder;
    public static Relay acquisitionAcquisitionRoller;
    public static CANJaguar acquisitionAcquisitionScrewlift;
    public static Encoder acquisitionAcquisitionScrewEncoder;
    public static Relay climbClimbLeftWinch;
    public static Relay climbClimbRightWinch;
    public static Servo climbClimbReleaseLeftPin;
    public static Servo climbClimbReleaseRightPin;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        try { 
            driveTrainJaguarLeftFront = new CANJaguar(2);
        } catch (CANTimeoutException ex) {
            ex.printStackTrace();
        }
	
        
        try { 
            driveTrainJaguarRightFront = new CANJaguar(3);
        } catch (CANTimeoutException ex) {
            ex.printStackTrace();
        }
	
        
        try { 
            driveTrainJaguarLeftBack = new CANJaguar(4);
        } catch (CANTimeoutException ex) {
            ex.printStackTrace();
        }
	
        
        try { 
            driveTrainJaguarRightBack = new CANJaguar(5);
        } catch (CANTimeoutException ex) {
            ex.printStackTrace();
        }
	
        
        driveTrainRobotDrive41 = new RobotDrive(driveTrainJaguarLeftFront, driveTrainJaguarLeftBack,
              driveTrainJaguarRightFront, driveTrainJaguarRightBack);
	
        driveTrainRobotDrive41.setSafetyEnabled(true);
        driveTrainRobotDrive41.setExpiration(0.1);
        driveTrainRobotDrive41.setSensitivity(0.5);
        driveTrainRobotDrive41.setMaxOutput(1.0);
        driveTrainRobotDrive41.setInvertedMotor(RobotDrive.MotorType.kFrontLeft, true);
        driveTrainRobotDrive41.setInvertedMotor(RobotDrive.MotorType.kRearLeft, true);
        shooterShooterFrontWheel = new Relay(1, 1);
	LiveWindow.addActuator("Shooter", "Shooter FrontWheel", shooterShooterFrontWheel);
        
        shooterShooterBackWheel = new Relay(1, 2);
	LiveWindow.addActuator("Shooter", "Shooter BackWheel", shooterShooterBackWheel);
        
        try { 
            shooterShooterAngle = new CANJaguar(6);
        } catch (CANTimeoutException ex) {
            ex.printStackTrace();
        }
	
        
        shooterShooterAngleEncoder = new Encoder(1, 3, 1, 4, false, EncodingType.k4X);
	LiveWindow.addSensor("Shooter", "Shooter AngleEncoder", shooterShooterAngleEncoder);
        shooterShooterAngleEncoder.setDistancePerPulse(1.0);
        shooterShooterAngleEncoder.setPIDSourceParameter(PIDSourceParameter.kRate);
        shooterShooterAngleEncoder.start();
        acquisitionAcquisitionRoller = new Relay(1, 3);
	LiveWindow.addActuator("Acquisition", "Acquisition Roller", acquisitionAcquisitionRoller);
        
        try { 
            acquisitionAcquisitionScrewlift = new CANJaguar(7);
        } catch (CANTimeoutException ex) {
            ex.printStackTrace();
        }
	
        
        acquisitionAcquisitionScrewEncoder = new Encoder(1, 1, 1, 2, false, EncodingType.k4X);
	LiveWindow.addSensor("Acquisition", "Acquisition ScrewEncoder", acquisitionAcquisitionScrewEncoder);
        acquisitionAcquisitionScrewEncoder.setDistancePerPulse(1.0);
        acquisitionAcquisitionScrewEncoder.setPIDSourceParameter(PIDSourceParameter.kRate);
        acquisitionAcquisitionScrewEncoder.start();
        climbClimbLeftWinch = new Relay(1, 4);
	LiveWindow.addActuator("Climb", "Climb LeftWinch", climbClimbLeftWinch);
        
        climbClimbRightWinch = new Relay(1, 5);
	LiveWindow.addActuator("Climb", "Climb RightWinch", climbClimbRightWinch);
        
        climbClimbReleaseLeftPin = new Servo(1, 1);
	LiveWindow.addActuator("Climb", "Climb ReleaseLeftPin", climbClimbReleaseLeftPin);
        
        climbClimbReleaseRightPin = new Servo(1, 2);
	LiveWindow.addActuator("Climb", "Climb ReleaseRightPin", climbClimbReleaseRightPin);
        
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
