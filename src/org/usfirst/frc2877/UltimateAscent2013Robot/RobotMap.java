// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.


package org.usfirst.frc2877.UltimateAscent2013Robot;
    
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.CounterBase.EncodingType; import edu.wpi.first.wpilibj.Encoder.PIDSourceParameter;
import edu.wpi.first.wpilibj.can.*;

import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import java.util.Vector;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static CANJaguar driveTrainJaguarLeftFront;
    public static CANJaguar driveTrainJaguarRightFront;
    public static CANJaguar driveTrainJaguarLeftBack;
    public static CANJaguar driveTrainJaguarRightBack;
    public static RobotDrive driveTrainRobotDrive41;
    public static CANJaguar shooterShooterFrontWheel;
    public static CANJaguar shooterShooterBackWheel;
    public static CANJaguar shooterShooterAngleControl;
    public static AnalogChannel shooterShooterAngleSensor;
    public static Relay acquisitionAcquisitionRoller;
    public static Relay acquisitionAcquisitionScrewlift;
    public static DigitalInput rotaryLimitSwitch;
//    public static Encoder acquisitionAcquisitionScrewEncoder;
//    public static Relay climbClimbLeftWinch;
//    public static Relay climbClimbRightWinch;
//    public static Servo climbClimbReleaseLeftPin;
//    public static Servo climbClimbReleaseRightPin;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static CANJaguar initJaguar(int jagnum, String descr)
    {
        CANJaguar canJag = null;
        System.out.println("CAN init " + jagnum + " " + descr);
        try { 
            canJag = new CANJaguar(jagnum);
            Robot.debugOutNumber(descr,canJag.getOutputCurrent());
        } catch (CANTimeoutException ex) {
            canJag = null;
            System.out.println("CAN Timeout Exception on " + descr);
        }
        return canJag;
    }
    
    public static void init() {
        
        driveTrainJaguarLeftFront = initJaguar(2, "Left Front");
        driveTrainJaguarLeftBack = initJaguar(3, "Left Back");
        driveTrainJaguarRightBack = initJaguar(4, "Right Back");
        driveTrainJaguarRightFront = initJaguar(5, "Right Front");
  
        /*
        shooterShooterBackWheel = initJaguar(6, "Shooter Front Wheel");
        shooterShooterFrontWheel = initJaguar(7, "Shooter Back Wheel");
        shooterShooterAngleControl = initJaguar(9, "Shooter Angle");
        */
        
        driveTrainRobotDrive41 = new RobotDrive(driveTrainJaguarLeftFront, driveTrainJaguarLeftBack,
          driveTrainJaguarRightFront, driveTrainJaguarRightBack);

        driveTrainRobotDrive41.setSafetyEnabled(false);
        driveTrainRobotDrive41.setExpiration(10);
        driveTrainRobotDrive41.setSensitivity(0.5);
        driveTrainRobotDrive41.setMaxOutput(1.0);
        driveTrainRobotDrive41.setInvertedMotor(RobotDrive.MotorType.kFrontRight, true);
        driveTrainRobotDrive41.setInvertedMotor(RobotDrive.MotorType.kRearRight, true);
        
        
//        shooterShooterFrontWheel = new Relay(1, 2);
//	LiveWindow.addActuator("Shooter", "Shooter FrontWheel", shooterShooterFrontWheel);
//        
//        shooterShooterBackWheel = new Relay(1, 1);
//	LiveWindow.addActuator("Shooter", "Shooter BackWheel", shooterShooterBackWheel);
        
        shooterShooterAngleSensor = new AnalogChannel(1);
        
        acquisitionAcquisitionScrewlift = new Relay(1,2,Relay.Direction.kBoth);
        
        rotaryLimitSwitch = new DigitalInput(1);
               
        acquisitionAcquisitionRoller = new Relay(1, 1);
	LiveWindow.addActuator("Acquisition", "Acquisition Roller", acquisitionAcquisitionRoller);	
        
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
